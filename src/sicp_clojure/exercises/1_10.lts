// Attempt at modelling the following in FSP.
//(define (A x y)
//  (cond ((= y 0) 0)
//        ((= x 0) (* 2 y))
//        ((= y 1) 2)
//        (else (A (- x 1)
//                 (A x (- y 1))))))

const N = 50

const X = 1
const Y = 3
range DEPTH = 0..20

// NOTE: For A_ITER i am using a max value of Y of N-1, actually this will be reduced for each level of recursion and this isn't being
// represented at the moment
// NOTE: Should be able to combine A and A_ITER
A = A[X][Y],
A[x:0..N][y:0..0] 					= (result_a[0]   -> STOP),
A[x:0..0][y:1..N] 					= (result_b[2*y] -> STOP),
A[x:1..N][y:1..1] 					= (result_c[2]   -> STOP),
A[x:1..N][y:2..N] 					= (recur 		 -> A_ITER[x][y-1][0]),
A_ITER[x:0..N][y:0..0][i:DEPTH] 	=  when (i==0) found_y_a -> A[x-1][0] | 
									   when (i>0)  found_y_b -> A_ITER[x][0][i-1]),
A_ITER[x:0..0][y:1..N-1][i:DEPTH] 	= (when (i==0) found_y_c -> A[x-1][2*y] |
									   when (i>0)  found_y_d -> A_ITER[x][2*y][i-1]),
A_ITER[x:1..N][y:1..1][i:DEPTH] 	= (when (i==0) found_y_e -> A[x-1][2] | 
									   when (i>0)  found_y_f -> A_ITER[x][2][i-1]),
A_ITER[x:1..N][y:2..N-1][i:DEPTH] 	= (recur_iter    		 -> A_ITER[x][y-1][i+1]).

// Above can successfully calcuate (A 1 2) = 4 but not (A 1 3) = 8



		



